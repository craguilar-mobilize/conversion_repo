CREATE OR REPLACE SEQUENCE PUBLIC.DemoUsers_ID
  START WITH 1
COMMENT = 'FOR TABLE-COLUMN PUBLIC.DemoUsers.ID';

CREATE OR REPLACE TABLE PUBLIC.DemoUsers (
  ID        INTEGER DEFAULT PUBLIC.DemoUsers_ID.NEXTVAL /*** MSC-WARNING - MSCEWI1048 - SEQUENCE -  GENERATED BY DEFAULT  START WITH 1 ***/
  PRIMARY   KEY,
  Name      VARCHAR,
  Birthday  VARCHAR,
  CityCode  INTEGER,
  Email     VARCHAR
);

-- <sc-insert> </sc-insert> 
INSERT INTO PUBLIC.DemoUsers(Name, Birthday, CityCode, Email) VALUES('Emma Ezquivel', '2021-11-11', 123, 'emma@mobilize.se');

-- <sc-insert> </sc-insert> 
INSERT INTO PUBLIC.DemoUsers(Name, Birthday, CityCode, Email) VALUES('Daniel Duran', '2021-10-11', 456, 'daniel@mobilize.se');

-- <sc-insert> </sc-insert> 
INSERT INTO PUBLIC.DemoUsers(Name, Birthday, CityCode, Email) VALUES('Jennifer Jones', '2021-09-10', 789, 'jennifer@mobilize.se');

-- <sc-insert> </sc-insert> 
INSERT INTO PUBLIC.DemoUsers(Name, Birthday, CityCode, Email) VALUES('Joseph Jar', '2021-08-09', 741, 'joseph@mobilize.se');

-- <sc-view> DemoUserView </sc-view> 
CREATE OR REPLACE VIEW PUBLIC.View_DemoUsers
(
  Name,
  CityCode,
  Email
)
AS
SELECT Name, CityCode, Email
FROM
  PUBLIC.DemoUsers;

-- <sc-procedure> InsertDemoUsers </sc-procedure> 
CREATE OR REPLACE PROCEDURE PUBLIC.InsertDemoUsers (in_Name STRING, in_Birthday TIMESTAMP, in_CityCode FLOAT, in_Email STRING)
RETURNS STRING
LANGUAGE JAVASCRIPT
EXECUTE AS CALLER
AS
$$
  // REGION SnowConvert Helpers Code
  var formatDate = (arg) => (new Date(arg - (arg.getTimezoneOffset() * 60000))).toISOString().slice(0,-1);
  var fixBind = function (arg) {
    arg = arg instanceof Date ? formatDate(arg) : IS_NULL(arg) ? null : arg;
    return arg;
  };
  var SQL = {
    FOUND : false,
    NOTFOUND : false,
    ROWCOUNT : 0,
    ISOPEN : false
  };
  var _RS, _ROWS, SQLERRM = "normal, successful completion", SQLCODE = 0;
  var getObj = (_rs) => Object.assign(new Object(),_rs);
  var getRow = (_rs) => (values = Object.values(_rs)) && (values = values.splice(-1 * _rs.getColumnCount())) && values;
  var fetch = (_RS,_ROWS,fmode) => _RS.getRowCount() && _ROWS.next() && (fmode ? getObj : getRow)(_ROWS) || (fmode ? new Object() : []);
  var EXEC = function (stmt,binds,opts) {
    try {
      binds = !(arguments[1] instanceof Array) && ((opts = arguments[1]) && []) || (binds || []);
      opts = opts || new Object();
      binds = binds ? binds.map(fixBind) : binds;
      _RS = snowflake.createStatement({
          sqlText : stmt,
          binds : binds
        });
      _ROWS = _RS.execute();
      if (opts.sql !== 0) {
        var isSelect = stmt.toUpperCase().trimStart().startsWith("SELECT");
        var affectedRows = isSelect ? _RS.getRowCount() : _RS.getNumRowsAffected();
        SQL.FOUND = affectedRows != 0;
        SQL.NOTFOUND = affectedRows == 0;
        SQL.ROWCOUNT = affectedRows;
      }
      if (opts.row === 2) {
        return _ROWS;
      }
      var INTO = function (opts) {
        if (opts.vars == 1 && _RS.getColumnCount() == 1 && _ROWS.next()) {
          return _ROWS.getColumnValue(1);
        }
        if (opts.rec instanceof Object && _ROWS.next()) {
          var recordKeys = Object.keys(opts.rec);
          Object.assign(opts.rec,Object.fromEntries(new Map(getRow(_ROWS).map((element,Index) => [recordKeys[Index],element]))))
          return opts.rec;
        }
        return fetch(_RS,_ROWS,opts.row);
      };
      var BULK_INTO_COLLECTION = function (into) {
        for(let i = 0;i < _RS.getRowCount();i++) {
          FETCH_INTO_COLLECTIONS(into,fetch(_RS,_ROWS,opts.row));
        }
        return into;
      };
      if (_ROWS.getRowCount() > 0) {
        return _ROWS.getRowCount() == 1 ? INTO(opts) : BULK_INTO_COLLECTION(opts);
      }
    } catch(error) {
      RAISE(error.code,error.name,error.message)
    }
  };
  var RAISE = function (code,name,message) {
    message === undefined && ([name,message] = [message,name])
    var error = new Error(message);
    error.name = name
    SQLERRM = `${(SQLCODE = (error.code = code))}: ${message}`
    throw error;
  };
  var FETCH_INTO_COLLECTIONS = function (collections,fetchValues) {
    for(let i = 0;i < collections.length;i++) {
      collections[i].push(fetchValues[i]);
    }
  };
  var IS_NULL = (arg) => !(arg || arg === 0);
  // END REGION

  // ** MSC-WARNING - MSCEWI1022 - ONE OR MORE IDENTIFIERS IN THIS STATEMENT WERE CONSIDERED PARAMETERS BY DEFAULT. REFERENCED TABLE NOT FOUND. **
  EXEC(`INSERT INTO PUBLIC.DemoUsers(Name, Birthday, CityCode, Email)
  VALUES (?,
  /*** MSC-WARNING - MSCEWI1020 - CUSTOM UDF 'JSDATE_UDF' INSERTED. ***/
  PUBLIC.JSDATE_UDF(?), n_CityCode, ?)`,[IN_NAME,IN_BIRTHDAY,IN_EMAIL]);
  EXEC(`-- ** MSC-ERROR - MSCEWI3111 - COMMIT STATEMENT REQUIRES ADDITIONAL INTERVENTION **
--  COMMIT
        ;`);
$$;

-- <sc-execute> </sc-execute> 
CALL PUBLIC.InsertDemoUsers('TestTable', '2020-12-12', 420, 'testTable@email.com');

-- <sc-procedure> UpdateDemoUsers </sc-procedure> 
CREATE OR REPLACE PROCEDURE PUBLIC.UpdateDemoUsers (in_id FLOAT, in_Name STRING, in_Birthday TIMESTAMP, in_CityCode FLOAT, in_Email STRING)
RETURNS STRING
LANGUAGE JAVASCRIPT
EXECUTE AS CALLER
AS
$$
  // REGION SnowConvert Helpers Code
  var formatDate = (arg) => (new Date(arg - (arg.getTimezoneOffset() * 60000))).toISOString().slice(0,-1);
  var fixBind = function (arg) {
    arg = arg instanceof Date ? formatDate(arg) : IS_NULL(arg) ? null : arg;
    return arg;
  };
  var SQL = {
    FOUND : false,
    NOTFOUND : false,
    ROWCOUNT : 0,
    ISOPEN : false
  };
  var _RS, _ROWS, SQLERRM = "normal, successful completion", SQLCODE = 0;
  var getObj = (_rs) => Object.assign(new Object(),_rs);
  var getRow = (_rs) => (values = Object.values(_rs)) && (values = values.splice(-1 * _rs.getColumnCount())) && values;
  var fetch = (_RS,_ROWS,fmode) => _RS.getRowCount() && _ROWS.next() && (fmode ? getObj : getRow)(_ROWS) || (fmode ? new Object() : []);
  var EXEC = function (stmt,binds,opts) {
    try {
      binds = !(arguments[1] instanceof Array) && ((opts = arguments[1]) && []) || (binds || []);
      opts = opts || new Object();
      binds = binds ? binds.map(fixBind) : binds;
      _RS = snowflake.createStatement({
          sqlText : stmt,
          binds : binds
        });
      _ROWS = _RS.execute();
      if (opts.sql !== 0) {
        var isSelect = stmt.toUpperCase().trimStart().startsWith("SELECT");
        var affectedRows = isSelect ? _RS.getRowCount() : _RS.getNumRowsAffected();
        SQL.FOUND = affectedRows != 0;
        SQL.NOTFOUND = affectedRows == 0;
        SQL.ROWCOUNT = affectedRows;
      }
      if (opts.row === 2) {
        return _ROWS;
      }
      var INTO = function (opts) {
        if (opts.vars == 1 && _RS.getColumnCount() == 1 && _ROWS.next()) {
          return _ROWS.getColumnValue(1);
        }
        if (opts.rec instanceof Object && _ROWS.next()) {
          var recordKeys = Object.keys(opts.rec);
          Object.assign(opts.rec,Object.fromEntries(new Map(getRow(_ROWS).map((element,Index) => [recordKeys[Index],element]))))
          return opts.rec;
        }
        return fetch(_RS,_ROWS,opts.row);
      };
      var BULK_INTO_COLLECTION = function (into) {
        for(let i = 0;i < _RS.getRowCount();i++) {
          FETCH_INTO_COLLECTIONS(into,fetch(_RS,_ROWS,opts.row));
        }
        return into;
      };
      if (_ROWS.getRowCount() > 0) {
        return _ROWS.getRowCount() == 1 ? INTO(opts) : BULK_INTO_COLLECTION(opts);
      }
    } catch(error) {
      RAISE(error.code,error.name,error.message)
    }
  };
  var RAISE = function (code,name,message) {
    message === undefined && ([name,message] = [message,name])
    var error = new Error(message);
    error.name = name
    SQLERRM = `${(SQLCODE = (error.code = code))}: ${message}`
    throw error;
  };
  var FETCH_INTO_COLLECTIONS = function (collections,fetchValues) {
    for(let i = 0;i < collections.length;i++) {
      collections[i].push(fetchValues[i]);
    }
  };
  var IS_NULL = (arg) => !(arg || arg === 0);
  // END REGION

  EXEC(`UPDATE PUBLIC.DemoUsers
     SET
  Name = ?,
  Birthday=
  /*** MSC-WARNING - MSCEWI1020 - CUSTOM UDF 'JSDATE_UDF' INSERTED. ***/
  PUBLIC.JSDATE_UDF(?),
  CityCode = ?,
  Email = ?
  WHERE ID = ?`,[IN_NAME,IN_BIRTHDAY,IN_CITYCODE,IN_EMAIL,IN_ID]);
  EXEC(`-- ** MSC-ERROR - MSCEWI3111 - COMMIT STATEMENT REQUIRES ADDITIONAL INTERVENTION **
--  COMMIT
        ;`);
$$;

-- <sc-execute> </sc-execute> 
CALL PUBLIC.UpdateDemoUsers(5, 'TestUpdate', '2020-12-12', 840, 'testInsert@email.com');